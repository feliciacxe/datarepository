/* The following notes are notes made from the tutorial from https://mode.com/sql-tutorial/ */

-- Use SELECT COUNT(*) to return the number of rows. --

-- SELECT COUNT(column name) to return the number of rows in the column which is not null. Rows with null values will be deleted. --

-- Write column names as date_of_beginning or "date of beginning". --

-- Use SELECT SUM to calculate the sum of all cells in the column. --

-- Calculating highest single day increase in stock price. --
SELECT MAX (close-open)
FROM tutorial.aapl_historical_stock_price
  
-- Use GROUP BY when you want to separate data into categories. --
SELECT *
FROM tutorial.aapl_historical_stock_price
GROUP BY year, month

-- Calculating the lowest and highest prices that xxx stock achieved each month. --
SELECT year, 
       month,
    MIN(low) AS lowest_price,
    MAX(high) AS highest_price
  FROM tutorial.aapl_historical_stock_price
 GROUP BY year, month
 ORDER BY year, month
 
 -- SQL HAVING --
 -- Used to clean and filter data that has been aggregated. Especially in these cases when WHERE clause does not work. --
 
 -- SQL CASE -- 
 -- The CASE statement is SQL's way of handling if/then logic. The CASE statement is followed by at least one pair of WHEN and THEN statementsâ€”SQL's equivalent of IF/THEN in Excel.
-- Every CASE statement must end with the END statement. The ELSE statement is optional, and provides a way to capture values not specified in the WHEN/THEN statements. 

SELECT player_name,
       year,
       CASE WHEN year = 'SR' THEN 'yes'
            ELSE NULL END AS is_a_senior
  FROM benn.college_football_players
  
  -- You can also define a number of outcomes in a CASE statement by including as many WHEN/THEN statements as you'd like. --
  -- Create a new column to categorize  / create a range. -- 
  SELECT player_name,
       weight,
       CASE WHEN weight > 250 THEN 'over 250'
            WHEN weight > 200 AND weight <= 250 THEN '201-250'
            WHEN weight > 175 AND weight <= 200 THEN '176-200'
            ELSE '175 or under' END AS weight_group
  FROM benn.college_football_players
  
  -- It is also possible to string together multiple conditional statements using AND or OR. --
  SELECT player_name,
       CASE WHEN year = 'FR' AND position = 'WR' THEN 'frosh_wr'
            ELSE NULL END AS sample_case_statement
  FROM benn.college_football_players
  
  -- Combining SQL CASE and COUNT. --
  SELECT CASE WHEN year = 'FR' THEN 'FR'
            WHEN year = 'SO' THEN 'SO'
            WHEN year = 'JR' THEN 'JR'
            WHEN year = 'SR' THEN 'SR'
            ELSE 'No Year Data' END AS year_group,
            COUNT(1) AS count
  FROM benn.college_football_players
 GROUP BY 1
 /* Numbers can be used to replace columns to simplify the query. */
 
 -- Use SELECT DISTINCT to find unique values in the column. --
 
 -- To count how many unique values in the column: --
 SELECT COUNT(DISTINCT month) AS unique_months
  FROM tutorial.aapl_historical_stock_price
  
  -- SQL JOIN --
  -- When joining more than one tables, a practice that can simplify query is to give a table an alias by adding a space after the table name and typing the intended name of the alias. --
FROM benn.college_football_players players /* First table with alias */
JOIN benn.college_football_teams teams /* Second table with alias */
ON players.school_name = teams.school_name /* Common columns / how the tables are related to each other */

-- SQL INNER JOIN : Returns only matched rows from both tables. --
-- SQL LEFT JOIN : Returns only unmatched rows from the left table / Table 1. --
-- SQL RIGHT JOIN : Returns only unmatched rows from the right table / Table 2. --
-- SQL FULL OUTER JOIN : Returns all rows (matched and unmatched) from both tables. --

